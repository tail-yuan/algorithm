
//小Q得到一个神奇的数列: 1, 12, 123,...12345678910,1234567891011...。
//并且小Q对于能否被3整除这个性质很感兴趣。
//小Q现在希望你能帮他计算一下从数列的第l个到第r个(包含端点)有多少个数可以被3整除。
//输入描述：
//输入包括两个整数l和r(1 <= l <= r <= 1e9), 表示要求解的区间两端。
//输出描述：
//输出一个整数, 表示区间内能被3整除的数字个数。
//1. 直接%3==0?true:false
//2. 将每一位累加之后的和sum%3==0?true:false
//3. 1+2+...+9+1+0+1+1... <=>1+2+...+9+10+11+12,所以利用等差数列求和公式求得sum=(n*n+1) /2,避免越界
class Is3Times
{
public:
	int getNum(int l, int r)
	{
		int sum = 0;
		for (int i = l; i <= r; i++)
		{
			long long tmp = (long long)(i) * (long long)(i + 1) / 2L;
			if (tmp % 3 == 0)
				sum++;
		}
		return sum;
	}
};